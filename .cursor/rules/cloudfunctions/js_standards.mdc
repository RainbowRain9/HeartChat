---
description: 云函数 JavaScript 编码规范
globs: 
alwaysApply: false
---
# 云函数 JavaScript 编码规范

## 基本规范

1. 使用 ES6+ 语法特性
2. 代码缩进使用 2 个空格
3. 使用分号结束语句
4. 使用单引号表示字符串
5. 每个文件末尾保留一个空行
6. 避免使用全局变量
7. 函数长度不超过 100 行
8. 每行代码不超过 100 个字符

## 命名规范

1. 变量和函数使用驼峰命名法（camelCase）
2. 常量使用全大写，多个单词用下划线（_）连接
3. 函数名应当是动词或动词短语
4. 布尔类型变量名应当以 is、has、can 等开头
5. 避免使用单字母变量名，除非是在循环中使用的索引

## 函数规范

1. 函数应当只做一件事
2. 函数参数不应超过 3 个，如果需要更多参数，考虑使用对象
3. 使用默认参数代替条件语句
4. 使用箭头函数简化代码
5. 使用解构赋值简化参数获取
6. 避免副作用，保持函数的纯粹性

## 异步处理

1. 使用 async/await 处理异步操作，避免回调地狱
2. 使用 try/catch 捕获异步操作的异常
3. 避免嵌套 Promise
4. 合理使用 Promise.all 处理并行操作
5. 避免在循环中使用 await

## 错误处理

1. 使用 try/catch 捕获可能的异常
2. 返回统一格式的错误信息
3. 记录关键错误日志
4. 避免吞掉异常，确保异常被正确处理
5. 使用自定义错误类型区分不同类型的错误

## 注释规范

1. 每个函数前添加注释，说明功能、参数和返回值
2. 复杂逻辑添加行内注释
3. TODO 注释格式：// TODO: 说明
4. FIXME 注释格式：// FIXME: 说明
5. 废弃代码不要注释保留，直接删除

## 模块化

1. 使用 CommonJS 模块系统
2. 每个云函数只做一件事
3. 将通用逻辑抽取为独立模块
4. 避免循环依赖
5. 明确模块的导入和导出

## 安全性

1. 验证所有用户输入
2. 避免使用 eval 和 Function 构造函数
3. 使用参数化查询避免注入攻击
4. 不在代码中硬编码敏感信息
5. 使用最小权限原则访问资源
