---
description: 
globs: 
alwaysApply: true
---
# 组件设计规范

## 概述
HeartChat使用组件化开发方式，将界面拆分为可复用的组件，提高代码复用率和可维护性。组件设计遵循微信小程序自定义组件的规范和最佳实践。

## 组件设计原则
- 单一职责：每个组件只负责一个功能点
- 高内聚低耦合：组件内部逻辑紧密相关，与外部的依赖最小化
- 接口明确：组件对外暴露清晰的属性和事件接口
- 状态管理：合理管理组件内部状态，避免状态混乱
- 样式隔离：使用组件样式隔离特性，避免样式冲突
- 性能优化：避免不必要的渲染和计算

## 组件目录结构
- [miniprogram/components/](mdc:miniprogram/components)：全局组件
  - [chat-bubble/](mdc:miniprogram/components/chat-bubble)：聊天气泡组件
  - [chat-input/](mdc:miniprogram/components/chat-input)：聊天输入组件
  - [emotion-analysis/](mdc:miniprogram/components/emotion-analysis)：情感分析组件
  - [emotion-card/](mdc:miniprogram/components/emotion-card)：情绪卡片组件
  - [emotion-dashboard/](mdc:miniprogram/components/emotion-dashboard)：情绪仪表盘组件
  - [emotion-history/](mdc:miniprogram/components/emotion-history)：情绪历史组件
  - [emotion-panel/](mdc:miniprogram/components/emotion-panel)：情绪面板组件
  - [emotion-pie/](mdc:miniprogram/components/emotion-pie)：情绪饼图组件
  - [interest-analysis/](mdc:miniprogram/components/interest-analysis)：兴趣分析组件
  - [login/](mdc:miniprogram/components/login)：登录组件
  - [practice-card/](mdc:miniprogram/components/practice-card)：练习卡片组件
  - [role-card/](mdc:miniprogram/components/role-card)：角色卡片组件
  - [topic-analysis/](mdc:miniprogram/components/topic-analysis)：话题分析组件

## 分包组件
- [miniprogram/packageChat/components/](mdc:miniprogram/packageChat/components)：聊天功能分包组件
- [miniprogram/packageEmotion/components/](mdc:miniprogram/packageEmotion/components)：情感分析分包组件

## 外部组件库
- [miniprogram_npm/@vant/weapp/](mdc:miniprogram/miniprogram_npm/@vant/weapp)：Vant组件库

## 常用组件示例

### 聊天气泡组件
```javascript
// chat-bubble.js
Component({
  properties: {
    message: Object, // 消息对象
    isUser: Boolean, // 是否为用户消息
  },
  
  data: {
    // 组件内部数据
  },
  
  methods: {
    // 组件方法
  }
})
```

### 情绪卡片组件
```javascript
// emotion-card.js
Component({
  properties: {
    emotion: Object, // 情绪对象
    showDetails: Boolean, // 是否显示详情
  },
  
  data: {
    // 组件内部数据
  },
  
  methods: {
    onTap() {
      // 点击事件处理
      this.triggerEvent('tap', { id: this.data.emotion._id });
    }
  }
})
```

## 组件通信方式
- 属性传值（properties）：父组件向子组件传递数据
- 事件通信（triggerEvent）：子组件向父组件通信
- 获取组件实例：父组件通过selectComponent获取子组件实例
- 全局状态：使用全局状态管理跨组件通信

## 组件样式隔离
组件样式默认采用隔离模式，在Component构造器中设置：
```javascript
Component({
  options: {
    styleIsolation: 'isolated' // 样式隔离
  }
})
```

## 组件生命周期
合理使用组件生命周期函数：
- created：组件实例创建时
- attached：组件添加到页面时
- ready：组件布局完成时
- moved：组件位置移动时
- detached：组件从页面移除时

## 组件复用与继承
对于相似组件，可以使用behaviors实现代码复用：
```javascript
// common-behavior.js
export default Behavior({
  properties: {
    // 公共属性
  },
  methods: {
    // 公共方法
  }
})

// 在组件中使用
import commonBehavior from '../behaviors/common-behavior';

Component({
  behaviors: [commonBehavior],
  // 组件特有配置
})
```

## 组件性能优化
- 避免频繁setData，合并数据更新
- 使用pure-data-pattern提高性能
- 懒加载不可见组件
- 适当使用wx:if和wx:for的性能优化技巧
