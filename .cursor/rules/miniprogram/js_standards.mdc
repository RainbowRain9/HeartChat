---
description: 
globs: .js
alwaysApply: false
---
# 小程序端 JavaScript 编码规范

## 基本规范

1. 使用 ES6+ 语法特性
2. 代码缩进使用 2 个空格
3. 使用分号结束语句
4. 使用单引号表示字符串
5. 每个文件末尾保留一个空行
6. 避免使用全局变量
7. 函数长度不超过 100 行
8. 每行代码不超过 100 个字符

## 命名规范

1. 变量和函数使用驼峰命名法（camelCase）
2. 常量使用全大写，多个单词用下划线（_）连接
3. 函数名应当是动词或动词短语
4. 布尔类型变量名应当以 is、has、can 等开头
5. 避免使用单字母变量名，除非是在循环中使用的索引
6. 页面和组件的方法使用驼峰命名法

## 页面结构

```javascript
// 页面数据
const pageData = {
  // 页面的初始数据
  data: {
    // 数据字段
  },

  // 生命周期函数
  onLoad(options) {
    // 页面加载时执行
  },
  onReady() {
    // 页面初次渲染完成时执行
  },
  onShow() {
    // 页面显示时执行
  },
  onHide() {
    // 页面隐藏时执行
  },
  onUnload() {
    // 页面卸载时执行
  },
  onPullDownRefresh() {
    // 下拉刷新时执行
  },
  onReachBottom() {
    // 上拉触底时执行
  },
  onShareAppMessage() {
    // 用户点击右上角分享时执行
  },

  // 事件处理函数
  handleTap() {
    // 处理点击事件
  },

  // 业务逻辑函数
  loadData() {
    // 加载数据
  }
};

// 注册页面
Page(pageData);
```

## 组件结构

```javascript
// 组件定义
Component({
  // 组件的属性列表
  properties: {
    // 属性定义
    propName: {
      type: String,
      value: ''
    }
  },

  // 组件的初始数据
  data: {
    // 数据字段
  },

  // 组件的生命周期
  lifetimes: {
    created() {
      // 组件实例刚创建时执行
    },
    attached() {
      // 组件实例进入页面节点树时执行
    },
    ready() {
      // 组件在视图层布局完成后执行
    },
    detached() {
      // 组件实例被从页面节点树移除时执行
    }
  },

  // 组件所在页面的生命周期
  pageLifetimes: {
    show() {
      // 页面被展示时执行
    },
    hide() {
      // 页面被隐藏时执行
    },
    resize(size) {
      // 页面尺寸变化时执行
    }
  },

  // 组件的方法列表
  methods: {
    // 事件处理函数
    handleTap() {
      // 处理点击事件
    },

    // 内部方法
    _loadData() {
      // 加载数据
    }
  }
});
```

## 数据管理

1. 使用 `this.setData()` 更新页面数据
2. 避免频繁调用 `setData()`，合并数据更新
3. 使用路径表达式更新数据的一部分，如 `'array[0].name'`
4. 避免直接修改 `this.data`，总是使用 `setData()`
5. 使用全局状态管理处理跨页面数据

## 事件处理

1. 事件处理函数使用 `handle` 前缀，如 `handleTap`
2. 使用事件委托处理列表项的事件
3. 使用 `data-*` 属性传递数据，通过 `e.currentTarget.dataset` 获取
4. 避免在事件处理函数中执行耗时操作
5. 使用节流或防抖处理频繁触发的事件

## 异步处理

1. 使用 Promise 处理异步操作
2. 使用 async/await 简化异步代码
3. 处理 Promise 的错误，避免未捕获的异常
4. 避免嵌套 Promise，使用链式调用
5. 使用 `wx.showLoading()` 和 `wx.hideLoading()` 提供加载反馈

## API 调用

1. 封装微信 API，提供 Promise 接口
2. 处理 API 调用的错误情况
3. 避免频繁调用相同的 API
4. 使用缓存减少不必要的 API 调用
5. 遵循微信小程序的调用频率限制

## 性能优化

1. 避免频繁调用 `setData()`
2. 只更新必要的数据
3. 使用 `wx:if` 而不是 `hidden` 属性减少初始渲染开销
4. 延迟加载非关键资源
5. 使用分包加载减小主包体积

## 安全性

1. 验证用户输入
2. 避免在客户端存储敏感信息
3. 使用 HTTPS 进行网络通信
4. 避免使用 `eval()` 和 `Function` 构造函数
5. 使用 `wx.request` 的 `timeout` 参数防止请求挂起

## 注释规范

1. 使用 JSDoc 风格的注释
2. 为函数添加注释，说明功能、参数和返回值
3. 为复杂逻辑添加行内注释
4. 使用 TODO 注释标记待完成的工作
5. 保持注释的更新，删除过时的注释

## 最佳实践

1. 遵循单一职责原则，一个函数只做一件事
2. 使用模块化组织代码
3. 避免硬编码，使用常量和配置
4. 定期检查和优化代码
5. 编写可测试的代码
