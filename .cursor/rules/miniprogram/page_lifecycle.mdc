---
description: 页面生命周期使用规范
globs: 
alwaysApply: false
---
# 页面生命周期使用规范

## 页面生命周期函数

### onLoad(options)

**触发时机**：页面加载时，只会触发一次

**适用场景**：
1. 获取页面参数
2. 初始化页面数据
3. 发起网络请求获取初始数据
4. 注册全局事件监听

**最佳实践**：
```javascript
Page({
  data: {
    // 初始数据
  },
  
  onLoad(options) {
    // 获取页面参数
    const { id } = options;
    
    // 初始化页面数据
    this.setData({
      itemId: id
    });
    
    // 获取初始数据
    this.fetchData(id);
    
    // 注册全局事件监听
    this.eventHandler = (event) => {
      // 处理事件
    };
    wx.onEvent(this.eventHandler);
  },
  
  fetchData(id) {
    // 发起网络请求
  }
});
```

### onShow()

**触发时机**：页面显示时，每次页面显示都会触发

**适用场景**：
1. 刷新页面数据
2. 恢复页面状态
3. 开始播放媒体
4. 开始动画

**最佳实践**：
```javascript
Page({
  onShow() {
    // 刷新页面数据
    this.refreshData();
    
    // 恢复页面状态
    this.restorePageState();
    
    // 开始播放媒体
    if (this.data.shouldPlayMedia) {
      this.startPlayingMedia();
    }
    
    // 开始动画
    this.startAnimation();
  },
  
  refreshData() {
    // 刷新数据
  },
  
  restorePageState() {
    // 恢复状态
  }
});
```

### onReady()

**触发时机**：页面初次渲染完成时，只会触发一次

**适用场景**：
1. 获取页面元素
2. 初始化图表
3. 执行需要在页面渲染完成后进行的操作

**最佳实践**：
```javascript
Page({
  onReady() {
    // 获取页面元素
    const query = wx.createSelectorQuery();
    query.select('#chart-container').boundingClientRect();
    query.exec((res) => {
      const { width, height } = res[0];
      
      // 初始化图表
      this.initChart(width, height);
    });
  },
  
  initChart(width, height) {
    // 初始化图表
  }
});
```

### onHide()

**触发时机**：页面隐藏时

**适用场景**：
1. 暂停媒体播放
2. 暂停动画
3. 保存页面状态
4. 停止需要在页面显示时运行的任务

**最佳实践**：
```javascript
Page({
  onHide() {
    // 暂停媒体播放
    this.pauseMedia();
    
    // 暂停动画
    this.pauseAnimation();
    
    // 保存页面状态
    this.savePageState();
    
    // 停止任务
    this.stopTasks();
  },
  
  pauseMedia() {
    // 暂停媒体
  },
  
  savePageState() {
    // 保存状态
  }
});
```

### onUnload()

**触发时机**：页面卸载时

**适用场景**：
1. 清理资源
2. 取消网络请求
3. 移除事件监听
4. 保存用户输入

**最佳实践**：
```javascript
Page({
  onUnload() {
    // 清理资源
    this.cleanupResources();
    
    // 取消网络请求
    if (this.requestTask) {
      this.requestTask.abort();
    }
    
    // 移除事件监听
    if (this.eventHandler) {
      wx.offEvent(this.eventHandler);
    }
    
    // 保存用户输入
    this.saveUserInput();
  },
  
  cleanupResources() {
    // 清理资源
  },
  
  saveUserInput() {
    // 保存用户输入
  }
});
```

## 页面事件处理函数

### onPullDownRefresh()

**触发时机**：用户下拉刷新时

**适用场景**：
1. 刷新页面数据
2. 重新加载资源

**最佳实践**：
```javascript
Page({
  onPullDownRefresh() {
    // 刷新数据
    this.refreshData().then(() => {
      // 停止下拉刷新
      wx.stopPullDownRefresh();
    }).catch((error) => {
      console.error('Refresh failed:', error);
      wx.stopPullDownRefresh();
    });
  },
  
  async refreshData() {
    // 刷新数据的逻辑
  }
});
```

### onReachBottom()

**触发时机**：页面上拉触底时

**适用场景**：
1. 加载更多数据
2. 实现无限滚动

**最佳实践**：
```javascript
Page({
  data: {
    list: [],
    page: 1,
    pageSize: 20,
    hasMore: true,
    isLoading: false
  },
  
  onReachBottom() {
    if (!this.data.hasMore || this.data.isLoading) {
      return;
    }
    
    this.setData({ isLoading: true });
    
    // 加载更多数据
    this.loadMoreData().then((res) => {
      const { list, hasMore } = res;
      
      this.setData({
        list: [...this.data.list, ...list],
        page: this.data.page + 1,
        hasMore,
        isLoading: false
      });
    }).catch((error) => {
      console.error('Load more failed:', error);
      this.setData({ isLoading: false });
    });
  },
  
  async loadMoreData() {
    // 加载更多数据的逻辑
  }
});
```

### onPageScroll(object)

**触发时机**：页面滚动时

**适用场景**：
1. 实现吸顶效果
2. 显示/隐藏回到顶部按钮
3. 实现滚动动画

**最佳实践**：
```javascript
Page({
  data: {
    showTopButton: false
  },
  
  onPageScroll(event) {
    const { scrollTop } = event;
    
    // 节流处理，避免频繁更新
    if (this.scrollTimer) {
      clearTimeout(this.scrollTimer);
    }
    
    this.scrollTimer = setTimeout(() => {
      // 显示/隐藏回到顶部按钮
      if (scrollTop > 300 && !this.data.showTopButton) {
        this.setData({ showTopButton: true });
      } else if (scrollTop <= 300 && this.data.showTopButton) {
        this.setData({ showTopButton: false });
      }
    }, 100);
  },
  
  scrollToTop() {
    wx.pageScrollTo({
      scrollTop: 0,
      duration: 300
    });
  }
});
```

### onShareAppMessage(object)

**触发时机**：用户点击页面内的分享按钮或右上角菜单的分享按钮时

**适用场景**：
1. 自定义分享内容
2. 跟踪分享行为

**最佳实践**：
```javascript
Page({
  onShareAppMessage(res) {
    const { from } = res;
    
    // 根据分享来源自定义分享内容
    if (from === 'button') {
      // 来自页面内分享按钮
      return {
        title: '自定义分享标题',
        path: `/pages/index/index?id=${this.data.id}&share=true`,
        imageUrl: '/images/share.jpg'
      };
    }
    
    // 来自右上角菜单的分享
    return {
      title: '默认分享标题',
      path: '/pages/index/index',
      imageUrl: '/images/default-share.jpg'
    };
  }
});
```

### onShareTimeline()

**触发时机**：用户点击右上角菜单的分享到朋友圈选项时

**适用场景**：
1. 自定义分享到朋友圈的内容

**最佳实践**：
```javascript
Page({
  onShareTimeline() {
    return {
      title: '自定义朋友圈标题',
      query: `id=${this.data.id}&share=timeline`,
      imageUrl: '/images/timeline-share.jpg'
    };
  }
});
```

## 页面数据管理

### 数据初始化

```javascript
Page({
  data: {
    // 基本数据
    title: '',
    content: '',
    
    // 列表数据
    list: [],
    
    // 加载状态
    isLoading: true,
    loadingError: null,
    
    // 分页数据
    page: 1,
    pageSize: 20,
    hasMore: true
  },
  
  onLoad() {
    this.initData();
  },
  
  initData() {
    // 初始化数据
  }
});
```

### 数据更新

```javascript
Page({
  updateData() {
    // 单个数据更新
    this.setData({
      title: '新标题'
    });
    
    // 批量数据更新
    this.setData({
      title: '新标题',
      content: '新内容',
      isLoading: false
    });
    
    // 数组数据更新
    const newList = [...this.data.list];
    newList[0] = { ...newList[0], name: '新名称' };
    
    this.setData({
      list: newList
    });
    
    // 使用路径表达式更新数组中的某一项
    this.setData({
      'list[0].name': '新名称'
    });
  }
});
```

## 页面路由

### 页面跳转

```javascript
Page({
  // 保留当前页面，跳转到应用内的某个页面
  navigateTo(event) {
    const { id } = event.currentTarget.dataset;
    wx.navigateTo({
      url: `/pages/detail/detail?id=${id}`
    });
  },
  
  // 关闭当前页面，跳转到应用内的某个页面
  redirectTo() {
    wx.redirectTo({
      url: '/pages/result/result'
    });
  },
  
  // 关闭所有页面，打开到应用内的某个页面
  reLaunch() {
    wx.reLaunch({
      url: '/pages/index/index'
    });
  },
  
  // 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面
  switchTab() {
    wx.switchTab({
      url: '/pages/home/home'
    });
  },
  
  // 关闭当前页面，返回上一页面或多级页面
  navigateBack() {
    wx.navigateBack({
      delta: 1
    });
  }
});
```

## 最佳实践

1. 在 `onLoad` 中进行一次性初始化，在 `onShow` 中进行状态恢复
2. 在 `onUnload` 中清理资源，避免内存泄漏
3. 使用节流或防抖处理频繁触发的事件，如 `onPageScroll`
4. 避免在生命周期函数中执行耗时操作，可以使用异步处理
5. 合理使用页面栈，避免层级过深
6. 使用 `this.setData()` 更新数据，避免直接修改 `this.data`
7. 避免频繁调用 `setData()`，合并数据更新
8. 使用路径表达式更新数据的一部分，减少传输数据量
9. 使用 `wx.startPullDownRefresh()` 和 `wx.stopPullDownRefresh()` 控制下拉刷新状态
10. 在页面跳转前进行必要的数据验证
