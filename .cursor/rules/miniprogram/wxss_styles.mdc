---
description: .wxss
globs: 
alwaysApply: false
---
# WXSS 样式规范

## 基本规范

1. 使用 2 个空格缩进
2. 使用小写字母命名选择器
3. 多个单词使用连字符（-）连接
4. 每个声明后使用分号
5. 在冒号后使用一个空格
6. 每个规则集使用一个空行分隔
7. 文件末尾保留一个空行

## 选择器命名

1. 使用有意义的类名，反映元素用途
2. 使用 BEM（Block-Element-Modifier）命名方法
   - 块（Block）：独立的组件，如 `.card`
   - 元素（Element）：块的一部分，如 `.card__title`
   - 修饰符（Modifier）：块或元素的变体，如 `.card--featured`
3. 避免使用 ID 选择器
4. 避免使用标签选择器，除非是重置样式
5. 避免使用通配符选择器 `*`

## 属性顺序

1. 定位属性（position, top, right, z-index, display, float 等）
2. 盒模型属性（width, height, padding, margin, border 等）
3. 排版属性（font, line-height, letter-spacing, color, text-align 等）
4. 视觉属性（background, opacity, box-shadow 等）
5. 其他属性（animation, transition 等）

## 单位使用

1. 使用 rpx 作为主要尺寸单位，实现响应式布局
2. 使用 px 设置 1px 边框
3. 使用百分比设置流式布局
4. 使用 em 或 rem 设置字体大小
5. 使用无单位的 line-height

## 颜色使用

1. 使用十六进制颜色代码，如 `#f0f0f0`
2. 可以使用简写形式，如 `#fff`
3. 使用 rgba() 设置透明度，如 `rgba(0, 0, 0, 0.5)`
4. 使用变量定义颜色，便于主题切换
5. 避免使用命名颜色，如 `red`、`blue`

## 布局方法

1. 优先使用 flex 布局
2. 使用 grid 布局处理复杂的网格结构
3. 避免使用浮动（float）布局
4. 使用盒模型（box-sizing: border-box）简化尺寸计算
5. 使用媒体查询适配不同设备

## 变量使用

1. 在 app.wxss 中定义全局变量
2. 使用变量定义颜色、字体、间距等常用值
3. 使用有意义的变量名，反映变量用途
4. 按类别组织变量，如颜色、字体、间距等
5. 为变量提供注释，说明用途和取值范围

## 注释规范

1. 使用 `/* */` 添加注释
2. 为每个主要部分添加注释
3. 为复杂的样式规则添加注释
4. 使用 TODO 注释标记待完成的工作
5. 保持注释的更新，删除过时的注释

## 性能优化

1. 避免使用过于复杂的选择器
2. 避免使用 `!important`
3. 避免使用过多的嵌套
4. 合并相同的样式规则
5. 使用简写属性，如 `margin` 代替 `margin-top`、`margin-right` 等

## 响应式设计

1. 使用 rpx 单位实现基本的响应式布局
2. 使用 flex 布局适应不同屏幕尺寸
3. 使用媒体查询处理特殊情况
4. 测试不同设备上的显示效果
5. 考虑横屏和竖屏的布局差异

## 最佳实践

1. 保持样式的一致性
2. 避免过度使用样式
3. 使用组件化思想组织样式
4. 定期检查和优化样式
5. 遵循一致的命名和格式化规范
