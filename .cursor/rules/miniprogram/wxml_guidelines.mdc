---
description: .wxml
globs: 
alwaysApply: false
---
# WXML 编写规范

## 基本规范

1. 使用 2 个空格缩进
2. 标签名使用小写字母
3. 属性名使用小写字母，多个单词用连字符（-）连接
4. 属性值使用双引号
5. 自闭合标签使用 `/>`
6. 保持标签结构清晰，适当使用换行和缩进
7. 文件末尾保留一个空行

## 标签使用

1. 使用语义化标签，如 `view`、`text`、`button` 等
2. 避免不必要的嵌套，减少标签层级
3. 列表渲染使用 `wx:for` 和 `wx:key`
4. 条件渲染使用 `wx:if`、`wx:elif` 和 `wx:else`
5. 使用 `block` 标签进行条件渲染和列表渲染，避免额外的视图层级

## 属性规范

1. 属性顺序：wx:for/wx:if > id > class > style > bind/catch 事件 > 其他属性
2. 使用 `class` 而不是 `style` 进行样式设置
3. 使用 `bind:` 前缀绑定事件，如 `bind:tap`
4. 使用 `catch:` 前缀阻止事件冒泡，如 `catch:tap`
5. 使用 `data-*` 属性传递数据，如 `data-id="{{item.id}}"`

## 模板和引用

1. 使用 `template` 封装可复用的视图片段
2. 使用 `import` 导入模板，使用 `include` 导入公共视图片段
3. 模板命名使用小写字母，多个单词用连字符（-）连接
4. 为模板提供清晰的注释，说明用途和参数

## 数据绑定

1. 使用双大括号 `{{}}` 进行数据绑定
2. 避免在模板中进行复杂的表达式计算，尽量在 JS 中处理
3. 使用 `wx:for-item` 和 `wx:for-index` 自定义循环变量名
4. 使用计算属性简化模板中的表达式

## 条件渲染

1. 使用 `wx:if` 进行条件渲染，而不是 `hidden` 属性
2. 对于频繁切换的内容，使用 `hidden` 属性
3. 避免使用复杂的条件表达式，尽量在 JS 中处理
4. 使用 `block` 标签包裹多个元素进行条件渲染

## 列表渲染

1. 始终为 `wx:for` 提供 `wx:key`，提高性能
2. 使用唯一标识作为 `wx:key`，如 `wx:key="id"`
3. 避免在循环中使用过多的条件判断
4. 对于大列表，考虑使用虚拟列表或分页加载

## 组件使用

1. 使用自定义组件封装可复用的功能
2. 组件名使用连字符命名法，如 `custom-component`
3. 为组件提供清晰的属性和事件文档
4. 避免组件之间的强耦合

## 无障碍

1. 为图片提供 `aria-label` 或 `aria-hidden` 属性
2. 为表单元素提供 `aria-label` 属性
3. 使用语义化标签提高可访问性
4. 确保交互元素可以通过键盘访问

## 性能优化

1. 减少不必要的标签嵌套
2. 避免频繁更新的元素使用复杂的样式
3. 使用 `wx:if` 而不是 `hidden` 属性减少初始渲染开销
4. 大列表使用惰性渲染或虚拟列表
5. 避免在模板中进行复杂计算

## 最佳实践

1. 保持 WXML 文件简洁，复杂逻辑放在 JS 中处理
2. 使用注释说明复杂的视图结构
3. 使用模板和组件提高代码复用性
4. 遵循一致的命名和格式化规范
5. 定期检查和优化 WXML 结构
